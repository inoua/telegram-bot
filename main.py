import os
import logging
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import (
    Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    ConversationHandler, CallbackContext, CallbackQueryHandler
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
METHODIST_CHAT_ID = int(os.getenv("METHODIST_CHAT_ID"))
CAMP_CHAT_ID = int(os.getenv("CAMP_CHAT_ID"))

if not TOKEN or not ADMIN_ID:
    logger.error("Token or Admin ID is not set. Exiting...")
    exit(1)

# –°–ª–æ–≤–∞—Ä–∏
user_waiting_state = {}
user_id_by_username = {}
approved_users = set()  # –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö user_id
approved_users = {ADMIN_ID}
pending_applications = {}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("telegram-bot-for-magistr-b1c60d226ade.json", scope)
client = gspread.authorize(creds)
sheet = client.open("–ú–∞–≥–∏—Å—Ç—Ä: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
ASK_FULL_NAME, ASK_BIRTHDAY, ASK_PHONE, ASK_GENDER, ASK_ROLE = range(5)
WAITING_TEXT = 100

#–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
CHOOSE_EVENT_TYPE, ASK_EVENT_NAME, ASK_EVENT_DATE, ASK_EVENT_PLACE, ASK_EVENT_DESCRIPTION, ASK_EVENT_EXTRA_INFO, ASK_EVENT_CONFIRMATION, SHOW_EVENT_DETAIL = range(8)

def handle_organize_event(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞ –Ω–µ callback query)
    if update.message:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data='event_type_official'),
                InlineKeyboardButton("–ù–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data='event_type_unofficial')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", 
            reply_markup=reply_markup
        )
    return CHOOSE_EVENT_TYPE  # –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ö–ù–û–ü–û–ö ---
def get_cancel_or_skip_button():
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel_to_menu")],
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_step")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_cancel_button():
    keyboard = [[InlineKeyboardButton("‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_menu')]]
    return InlineKeyboardMarkup(keyboard)
    
def cancel_to_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    query.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    return start(update, context)

# --- –•–ï–õ–ü–ï–† –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø ---
def set_current_state(state):
    def wrapper(func):
        def wrapped(update, context):
            context.user_data["current_state"] = state
            return func(update, context)
        return wrapped
    return wrapper
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üìÖ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
def handle_event_type_choice(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == "event_type_official":
        context.user_data["event_type"] = "official"
    elif query.data == "event_type_unofficial":
        context.user_data["event_type"] = "unofficial"
    else:
        query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return ConversationHandler.END

    query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    return ASK_EVENT_NAME

# –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@set_current_state(ASK_EVENT_NAME)
def ask_event_name(update: Update, context: CallbackContext):
    context.user_data["event_name"] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_button())
    return ASK_EVENT_DATE

# –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
@set_current_state(ASK_EVENT_DATE)
def ask_event_date(update: Update, context: CallbackContext):
    context.user_data["event_date"] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_button())
    return ASK_EVENT_PLACE

# –ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
@set_current_state(ASK_EVENT_PLACE)
def ask_event_place(update: Update, context: CallbackContext):
    context.user_data["event_place"] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_button())
    return ASK_EVENT_DESCRIPTION

# –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@set_current_state(ASK_EVENT_DESCRIPTION)
def ask_event_description(update: Update, context: CallbackContext):
    context.user_data["event_description"] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):", reply_markup=get_cancel_or_skip_button())
    return ASK_EVENT_EXTRA_INFO

# –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@set_current_state(ASK_EVENT_EXTRA_INFO)
def ask_event_extra_info(update: Update, context: CallbackContext):
    context.user_data["event_extra_info"] = update.message.text
    return ask_event_confirmation(update, context)


def skip_event_extra_info(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["event_extra_info"] = ""
    query.edit_message_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    return ask_event_confirmation(update, context)

def ask_event_confirmation(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    event_data = context.user_data
    message = (
        f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {event_data.get('event_name')}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event_data.get('event_date')}\n"
        f"üìç –ú–µ—Å—Ç–æ: {event_data.get('event_place')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event_data.get('event_description')}\n"
        f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {event_data.get('event_extra_info') or '‚Äî'}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")]
    ]
    query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    return ASK_EVENT_CONFIRMATION

def confirm_event(update: Update, context: CallbackContext):
    global sheet  
    query = update.callback_query
    query.answer()
    choice = query.data

    username = query.from_user.username or "–±–µ–∑ username"
    context.user_data["organizer_username"] = username

    if choice == "confirm_yes":
        sheet_name = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ" if context.user_data.get("event_type") == "official" else "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ"
        worksheet = sheet.worksheet(sheet_name)

        new_row = [
            context.user_data.get("event_name"),
            context.user_data.get("event_date"),
            context.user_data.get("event_place"),
            context.user_data.get("event_description"),
            context.user_data.get("event_extra_info", ""),
            context.user_data.get("organizer_username")
        ]
        worksheet.append_row(new_row, table_range="A2")

        query.edit_message_text("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
        return ConversationHandler.END

    else:
        query.edit_message_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        return start(update, context)
        
def save_event_to_sheet(context: CallbackContext):
    spreadsheet_id = "1GcQQjuSMA3ytaGlJ8WPh8hHupLhTy9b7EQnwgh23-Ag"
    service = context.bot_data["sheets_service"]

    values = [[
        context.user_data["event_name"],
        context.user_data["event_date"],
        context.user_data["event_place"],
        context.user_data["event_description"],
        context.user_data.get("event_extra_info", ""),
        f"@{context.user_data['organizer_username']}"
    ]]

    if context.user_data.get("event_type") == "official":
        range_name = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ!A2:F"
    else:
        range_name = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ!A2:F"

    body = {"values": values}
    service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id,
        range=range_name,
        valueInputOption="RAW",
        insertDataOption="INSERT_ROWS",
        body=body
    ).execute()

# –ö–æ–º–∞–Ω–¥—ã –∏ –∞–Ω–∫–µ—Ç–∞
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = user.id
    logger.info("User started the bot.")

    if user_id in approved_users:
        if user_id == ADMIN_ID:
            keyboard = ReplyKeyboardMarkup(
                [
                    ["üìÖ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "üìã –£–∑–Ω–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
                    ["üéØ –°–º–µ–Ω–∞"],
                    ["üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º", "üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º—É —Ü–µ–Ω—Ç—Ä—É"],
                    ["üõë –†–∞—Å–ø—Ä–æ—â–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º"]
                ],
                resize_keyboard=True
            )
        else:
            keyboard = ReplyKeyboardMarkup(
                [
                    ["üìÖ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "üìã –£–∑–Ω–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
                    ["üéØ –°–º–µ–Ω–∞"]
                ],
                resize_keyboard=True
            )
    else:
        keyboard = ReplyKeyboardMarkup(
            [
                ["üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"],
                ["‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
            ],
            resize_keyboard=True
        )

    text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–ø–¥–µ–π—Ç–∞
    if update.message:
        update.message.reply_text(text, reply_markup=keyboard)
    elif update.callback_query:
        update.callback_query.message.reply_text(text, reply_markup=keyboard)

    return ConversationHandler.END

def handle_menu(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    text = update.message.text
    logger.info(f"User {user_id} selected menu option or sent message. Text: {text}. State: {context.user_data.get('state', 'No state')}")

    if text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
        return begin_application(update, context)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—á–∞–ª—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        return WAITING_TEXT  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def begin_application(update: Update, context: CallbackContext):
    logger.info(f"User {update.message.from_user.id} started the registration process.")
    update.message.reply_text("–ù–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b>:", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    context.user_data['state'] = ASK_FULL_NAME  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return ASK_FULL_NAME

def ask_birthday(update: Update, context: CallbackContext):
    context.user_data["full_name"] = update.message.text
    logger.info(f"User {update.message.from_user.id} provided full name: {update.message.text}")
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000):")
    return ASK_BIRTHDAY

def ask_phone(update: Update, context: CallbackContext):
    context.user_data["birthday"] = update.message.text
    logger.info(f"User {update.message.from_user.id} provided birthday: {update.message.text}")
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return ASK_PHONE

def ask_gender(update: Update, context: CallbackContext):
    context.user_data["phone"] = update.message.text
    logger.info(f"User {update.message.from_user.id} provided phone: {update.message.text}")
    keyboard = [[
        InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="male"),
        InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="female")
    ]]
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ASK_GENDER

def ask_role(update: Update, context: CallbackContext):
    context.user_data["gender"] = update.callback_query.data
    logger.info(f"User {update.callback_query.from_user.id} selected gender: {update.callback_query.data}")
    keyboard = [[
        InlineKeyboardButton("–ú–µ—Ç–æ–¥–∏—Å—Ç", callback_data="methodist"),
        InlineKeyboardButton("–ú–∞–≥–∏—Å—Ç—Ä", callback_data="magistr")
    ]]
    update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ASK_ROLE

def submit_application(update: Update, context: CallbackContext):
    user_data = context.user_data

    if update.callback_query:
        user = update.callback_query.from_user
        user_data["role"] = update.callback_query.data
    elif update.message:
        user = update.message.from_user
        user_data["role"] = update.message.text
    else:
        return ConversationHandler.END

    user_data["user_id"] = user.id
    user_data["username"] = user.username if user.username else "–Ω–µ—Ç username"
    if user.username:
        user_id_by_username[user.username] = user.id

    pending_applications[user.id] = user_data

    text = (
        f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –§–ò–û: {user_data['full_name']}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birthday']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"üöª –ü–æ–ª: {user_data['gender']}\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_data['role']}\n"
        f"üÜî Telegram: @{user_data['username']}"
    )

    buttons = [[
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{user_data['user_id']}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_data['user_id']}")
    ]]

    logger.info(f"Sending new application from {user_data['username']} to admin.")
    context.bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=InlineKeyboardMarkup(buttons))

    if update.callback_query:
        update.callback_query.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", reply_markup=ReplyKeyboardRemove())
    elif update.message:
        update.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END

def handle_approval_rejection(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    action, user_id_str = query.data.split(":")
    user_id = int(user_id_str)
    user_data = pending_applications.get(user_id)

    if not user_data:
        logger.warning(f"–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        query.message.reply_text("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    # –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    role = user_data["role"].strip().lower()
    username = user_data["username"]
    full_name = user_data["full_name"]
    birthday = user_data["birthday"]
    phone = user_data["phone"]
    gender = user_data["gender"]

    if action == "approve":
        sheet_name = "–ú–µ—Ç–æ–¥–∏—Å—Ç—ã" if role == "methodist" else "–ú–∞–≥–∏—Å—Ç—Ä—ã"
        worksheet = sheet.worksheet(sheet_name)
        worksheet.append_row([full_name, birthday, phone, gender, f"@{username}"])
        approved_users.add(user_id)

        # –°–æ–æ–±—â–µ–Ω–∏–µ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        links = [
            "https://t.me/+_nrCKWdshN8wNzRi",
            "https://t.me/+P1S3QOP5LP40NjE6"
        ]
        if role == "methodist":
            links = [
                "https://t.me/+TEBK6X4Zvos1YzEy",
                "https://t.me/+bTsWQjpu3JoxMmZi",
                *links
            ]

        message = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! üéâ\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —á–∞—Ç–∞–º:\n" + "\n".join(links)
        context.bot.send_message(chat_id=user_id, text=message)

        keyboard = ReplyKeyboardMarkup(
            [
                ["üìÖ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "üìã –£–∑–Ω–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
                ["üéØ –°–º–µ–Ω–∞"]
            ],
            resize_keyboard=True
        )
        context.bot.send_message(chat_id=user_id, text="–í—ã —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:", reply_markup=keyboard)
        query.message.reply_text("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ")

    elif action == "reject":
        context.bot.send_message(chat_id=user_id, text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        query.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")

    query.edit_message_reply_markup(reply_markup=None)
    return ConversationHandler.END

def handle_menu_text(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    state = user_waiting_state.get(user_id)
    text = update.message.text
    logger.info(f"User {user_id} selected menu option or sent message. Text: {text}. State: {state}")

    if state in ["writing_to_methodists", "writing_to_camp"]:
        return handle_message_for_sending(update, context)

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    if user_id == ADMIN_ID:
        cancel_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
        ])

        if text == "üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º":
            user_waiting_state[user_id] = "writing_to_methodists"
            return update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤:", reply_markup=cancel_markup)
        elif text == "üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º—É —Ü–µ–Ω—Ç—Ä—É":
            user_waiting_state[user_id] = "writing_to_camp"
            return update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞:", reply_markup=cancel_markup)
        elif text == "üõë –†–∞—Å–ø—Ä–æ—â–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º":
            return update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üë∑")

    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if text == "üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å":
        return show_admin_menu(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        return help_command(update, context)
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

def help_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "‚ÑπÔ∏è <b>–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        "‚Äî –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É: –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª –≤ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start\n"
        "‚Äî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
        "‚Äî –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è: /cancel\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!",
        parse_mode="HTML"
    )
def show_admin_menu(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        logger.warning(f"Unauthorized access attempt by user {update.effective_user.id}")
        return

    logger.info(f"User {update.message.from_user.id} is admin. Showing main keyboard again.")
    update.message.reply_text("–†–µ–∂–∏–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ.")
    return start(update, context)  # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

def handle_events_menu(update: Update, context: CallbackContext):
    update.callback_query.answer()
    update.callback_query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º'. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    user_waiting_state[update.effective_user.id] = "writing_to_methodists"
    logger.info(f"User {update.callback_query.from_user.id} selected '–ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º'.")


def handle_camp_menu(update: Update, context: CallbackContext):
    update.callback_query.answer()
    update.callback_query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º—É —Ü–µ–Ω—Ç—Ä—É'. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    user_waiting_state[update.effective_user.id] = "writing_to_camp"
    logger.info(f"User {update.callback_query.from_user.id} selected '–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º—É —Ü–µ–Ω—Ç—Ä—É'.")

def handle_cancel_action(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id
    user_waiting_state[user_id] = None  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    logger.info(f"User {user_id} cancelled action.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback –∑–∞–ø—Ä–æ—Å
    update.callback_query.answer()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ
    update.callback_query.message.reply_text("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    update.callback_query.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())

    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –±–µ—Å–µ–¥—É

def handle_message_for_sending(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    state = user_waiting_state.get(user_id)
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message}")
    logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(update.message)}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º –∏–ª–∏ —Ü–µ–Ω—Ç—Ä—É
    if state == "writing_to_methodists":
        target_chat_id = METHODIST_CHAT_ID
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –º–µ—Ç–æ–¥–∏—Å—Ç—ã. chat_id: {target_chat_id}")
    elif state == "writing_to_camp":
        target_chat_id = CAMP_CHAT_ID
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª–∞–≥–µ—Ä—å. chat_id: {target_chat_id}")
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
        update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        return handle_menu_text(update, context)

    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if update.message.photo:
            logger.info(f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ: {update.message.photo}")
            largest_photo = update.message.photo[-1]
            logger.info(f"–°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ: {largest_photo.file_id}")
            caption = update.message.caption if update.message.caption else ""
            context.bot.send_photo(
                chat_id=target_chat_id,
                photo=largest_photo.file_id,
                caption=caption
            )

        elif update.message.video:
            logger.info(f"–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ: {update.message.video.file_id}")
            context.bot.send_video(
                chat_id=target_chat_id,
                video=update.message.video.file_id,
                caption=update.message.caption
            )
        elif update.message.document:
            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω: {update.message.document.file_id}")
            context.bot.send_document(
                chat_id=target_chat_id,
                document=update.message.document.file_id,
                caption=update.message.caption
            )
        elif update.message.text:
            logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
            context.bot.send_message(
                chat_id=target_chat_id,
                text=update.message.text
            )
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¢–∏–ø: {type(update.message)}")
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

#–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
def show_event_type_menu(update: Update, context: CallbackContext):
    logger.debug("show_event_type_menu called")  # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
    keyboard = [
        [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø—Ä–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="view_official_events")],
        [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="view_unofficial_events")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="cancel_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:", reply_markup=reply_markup)
    elif update.callback_query:
        update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def handle_view_events(update: Update, context: CallbackContext):
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logger.debug("handle_view_events called with update: %s", update)
    query = update.callback_query
    query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback
    logger.debug("Callback data: %s", query.data)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–µ–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if query.data == "view_official_events":
            logger.debug("Fetching official events")
            events = get_events_from_sheet("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ")
            send_event_summaries(events, query)
        # –ï—Å–ª–∏ –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ
        elif query.data == "view_unofficial_events":
            logger.debug("Fetching unofficial events")
            events = get_events_from_sheet("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ")
            send_event_summaries(events, query)
        else:
            logger.warning("Unknown callback data: %s", query.data)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        logger.error("Error occurred in handle_view_events: %s", e)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ Google Sheets —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def get_events_from_sheet(sheet_name):
    try:
        logger.debug("Fetching events from sheet: %s", sheet_name)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
        sheet = sheet.worksheet(sheet_name)
        data = worksheet.get_all_values()[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏

        logger.debug("Fetched %d rows of data from sheet '%s'", len(data), sheet_name)

        events = []
        for i, row in enumerate(data):
            if len(row) < 6:
                logger.warning("Skipping row %d due to insufficient data", i)
                continue
            event = {
                'name': row[0],
                'datetime': row[1],
                'place': row[2],
                'description': row[3],
                'extra_info': row[4],
                'organizer': row[5]
            }
            events.append(event)

        logger.debug("Successfully fetched %d events from sheet '%s'", len(events), sheet_name)

        if not events:
            logger.warning("No events found in sheet '%s'", sheet_name)  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

        return events
    except Exception as e:
        logger.error("Error fetching events from sheet '%s': %s", sheet_name, e)
        return []

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def send_event_summaries(events, query):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.debug("send_event_summaries called with %d events", len(events) if events else 0)

        if not events:
            logger.info("No events found.")
            query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –µ—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫—É
        logger.debug("Sending event summaries...")

        for i, event in enumerate(events):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            text = f"<b>{event['name']}</b>\nüïí {event['datetime']}\nüìç {event['place']}\nüìù {event['description']}"
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            logger.debug("Event %d: %s", i, text)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            keyboard = [[InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"event_detail_{i}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
            query.message.bot.send_message(chat_id=query.message.chat.id, text=text, parse_mode="HTML", reply_markup=reply_markup)
            logger.debug("Event %d summary sent", i)

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        query.edit_message_text("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π üëá")
        logger.debug("All event summaries sent.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª
        context = query.message.bot_data
        context['current_events'] = events
        logger.debug("Event list saved for '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' button.")
    except Exception as e:
        logger.error("Error in send_event_summaries: %s", e)
        query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def show_event_detail(update: Update, context: CallbackContext):
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logger.debug("show_event_detail called with update: %s", update)

    query = update.callback_query
    query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ callback
    logger.debug("Callback data: %s", query.data)

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
        event_index = int(query.data.split("_")[-1])
        logger.debug("Extracted event index: %d", event_index)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ context
        events = context.bot_data.get('current_events', [])
        if event_index >= len(events):
            query.message.reply_text("–û—à–∏–±–∫–∞: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            logger.warning("Event index out of range: %d", event_index)
            return

        # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ
        event = events[event_index]
        logger.debug("Fetched event: %s", event)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        text = (
            f"<b>{event['name']}</b>\n\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event['datetime']}\n"
            f"<b>–ú–µ—Å—Ç–æ:</b> {event['place']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event['description']}\n"
            f"<b>–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {event['extra_info']}\n"
            f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</b> @{event['organizer']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        query.edit_message_text(text, parse_mode="HTML")
        logger.debug("Event details sent: %s", text)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        logger.error("Error occurred in show_event_detail: %s", e)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    bot: Bot = updater.bot
    bot.set_my_commands([
        ("start", "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"),
        ("admin", "üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"),
        ("help", "‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    ])

    # ConversationHandler –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    registration_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex("^üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É$"), handle_menu)],
        states={
            ASK_FULL_NAME: [MessageHandler(Filters.text, ask_birthday)],
            ASK_BIRTHDAY: [MessageHandler(Filters.text, ask_phone)],
            ASK_PHONE: [MessageHandler(Filters.text, ask_gender)],
            ASK_GENDER: [CallbackQueryHandler(ask_role)],
            ASK_ROLE: [CallbackQueryHandler(submit_application)],
        },
        fallbacks=[CallbackQueryHandler(cancel_to_menu, pattern="cancel_to_menu")],
        allow_reentry=True
    )
    dispatcher.add_handler(registration_handler)

    event_calendar_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex("^üìñ –£–∑–Ω–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è$"), show_event_type_menu)],
        states={
            CHOOSE_EVENT_TYPE: [CallbackQueryHandler(handle_view_events, pattern="^view_")],
            SHOW_EVENT_DETAIL: [CallbackQueryHandler(show_event_detail, pattern="^event_detail_")],
        },
        fallbacks=[CallbackQueryHandler(cancel_to_menu, pattern="cancel_to_menu")],
        allow_reentry=True
    )
    dispatcher.add_handler(event_calendar_handler)

    # ConversationHandler –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    conv_handler_event = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex("^üìÖ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ$"), handle_organize_event)],
        states={
            CHOOSE_EVENT_TYPE: [CallbackQueryHandler(handle_event_type_choice, pattern="^event_type_")],
            ASK_EVENT_NAME: [MessageHandler(Filters.text & ~Filters.command, ask_event_name), CallbackQueryHandler(cancel_to_menu, pattern="cancel_to_menu")],
            ASK_EVENT_DATE: [MessageHandler(Filters.text & ~Filters.command, ask_event_date), CallbackQueryHandler(cancel_to_menu, pattern="cancel_to_menu")],
            ASK_EVENT_PLACE: [MessageHandler(Filters.text & ~Filters.command, ask_event_place), CallbackQueryHandler(cancel_to_menu, pattern="cancel_to_menu")],
            ASK_EVENT_DESCRIPTION: [MessageHandler(Filters.text & ~Filters.command, ask_event_description), CallbackQueryHandler(cancel_to_menu, pattern="cancel_to_menu")],
            ASK_EVENT_EXTRA_INFO: [MessageHandler(Filters.text & ~Filters.command, ask_event_extra_info), CallbackQueryHandler(cancel_to_menu, pattern="cancel_to_menu"), CallbackQueryHandler(skip_event_extra_info, pattern="skip_step")],
            ASK_EVENT_CONFIRMATION: [CallbackQueryHandler(confirm_event, pattern="^confirm_yes$|^confirm_no$"), CallbackQueryHandler(cancel_to_menu, pattern="cancel_to_menu")],
        },
        fallbacks=[CallbackQueryHandler(show_event_type_menu, pattern="^üìñ –£–∑–Ω–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è$"), CallbackQueryHandler(cancel_to_menu, pattern="cancel_to_menu")],
        allow_reentry=True
    )
    dispatcher.add_handler(conv_handler_event)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    dispatcher.add_handler(MessageHandler(Filters.regex("^üìã –£–∑–Ω–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è$"), show_event_type_menu))
    dispatcher.add_handler(CallbackQueryHandler(handle_view_events, pattern="^view_"))
    dispatcher.add_handler(CallbackQueryHandler(show_event_detail, pattern="^event_detail_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    dispatcher.add_handler(CallbackQueryHandler(handle_events_menu, pattern="events_menu"))
    dispatcher.add_handler(CallbackQueryHandler(handle_camp_menu, pattern="camp_menu"))
    dispatcher.add_handler(CallbackQueryHandler(handle_approval_rejection, pattern="^(approve|reject):"))
    dispatcher.add_handler(MessageHandler(Filters.regex("^üìÖ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ$"), handle_organize_event))
    dispatcher.add_handler(CallbackQueryHandler(cancel_to_menu, pattern="cancel_to_menu"))
    dispatcher.add_handler(CommandHandler("admin", show_admin_menu))

    # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" (cancel_action)
    dispatcher.add_handler(CallbackQueryHandler(handle_cancel_action, pattern="cancel_action"))

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
    dispatcher.add_handler(MessageHandler(Filters.text & (~Filters.command), handle_menu_text))

    # –ú–µ–¥–∏–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    dispatcher.add_handler(MessageHandler(Filters.photo | Filters.video | Filters.document, handle_message_for_sending))

    updater.start_polling(timeout=30, drop_pending_updates=True)
    updater.idle()

if __name__ == '__main__':
    main()
